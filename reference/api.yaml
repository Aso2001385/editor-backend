openapi: 3.1.0
x-stoplight:
  id: foltdh5qgfknu
info:
  title: Jason
  version: '3.1'
  summary: markdownを使ったホームページエディタ.
  description: ''
servers:
  - url: 'http://localhost:8080'
    description: localhost
paths:
  /api/users:
    post:
      summary: User登録
      operationId: post-users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserVerifications'
              examples:
                example-1:
                  value:
                    id: 1
                    name: 翔
                    code: '123456'
      tags:
        - create
        - Users
        - Paths
      description: ユーザー登録
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: 翔
                  minLength: 1
                  maxLength: 50
                email:
                  type: string
                  example: 2001195@s.asojuku.ac.jp
                  minLength: 1
                  maxLength: 50
                password:
                  type: string
                  format: password
                  example: AsoΣ2001195
                  maxLength: 30
                  minLength: 8
              required:
                - name
                - email
                - password
            examples:
              example:
                value:
                  name: 翔
                  email: 2001195@s.asojuku.ac.jp
                  password: AsoΣ2001195
        description: ''
    get:
      summary: User一覧
      operationId: get-users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                x-examples:
                  example-1:
                    - id: 1
                      class: 1
                      name: 翔
                      email: 2001195@s.asojuku.ac.jp
                      password: Aso2001195
                      point: 500
                    - id: 2
                      class: 0
                      name: メシア
                      email: 2001196@s.asojuku.ac.jp
                      password: Aso2001196
                      point: 100
                items:
                  $ref: '#/components/schemas/User'
              examples:
                example:
                  value:
                    - id: 1
                      name: 翔
                      email: 2001195@s.asojuku.ac.jp
                      point: 500
          headers: {}
      description: ユーザー全件取得。
      tags:
        - Paths
        - User
        - index
      parameters: []
    parameters: []
  '/api/users/{id}':
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
        description: user_id
    get:
      summary: User情報取得
      tags:
        - show
        - User
        - Paths
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                x-examples:
                  example-1:
                    id: 1
                    class: 1
                    name: 翔
                    email: 2001195@s.asojuku.ac.jp
                    password: Aso2001195
                    point: 500
                    project:
                      id: 1
                      user_id: 1
                      name: Project1
                      fike_code: abcdefg
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  project:
                    $ref: '#/components/schemas/Project'
              examples:
                example:
                  value:
                    user:
                      id: 1
                      name: 翔
                      email: 2001195@s.asojuku.ac.jp
                      point: 500
                    project:
                      id: 1
                      user_id: 1
                      name: Project1
      operationId: get-users-id
      description: |-
        特定idのユーザー情報を取得
        プロジェクトはプロジェクトユーザーテーブルからもってく
    put:
      summary: User情報編集
      operationId: put-users-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                example:
                  value:
                    id: 1
                    name: 翔
                    email: 2001195@s.asojuku.ac.jp
                    point: 500
      description: 特定idのユーザー情報を編集
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                class:
                  type: integer
                  minimum: 0
                  maximum: 1
                  default: 1
                name:
                  type: string
                  example: 翔
                  minLength: 1
                  maxLength: 50
                email:
                  type: string
                  example: 2001195@s.asojuku.ac.jp
                  format: email
                  minLength: 1
                  maxLength: 50
              required:
                - name
                - email
            examples:
              example:
                value:
                  class: 1
                  name: 翔
                  email: 2001195@s.asojuku.ac.jp
      tags:
        - Paths
        - update
        - User
    delete:
      summary: User情報削除
      operationId: delete-users-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: boolean
              examples:
                example:
                  value:
                    result: true
      description: '  特定idのユーザー情報を論理削除'
      tags:
        - delete
        - User
        - Paths
  /api/users/designs:
    get:
      summary: loginしているUserのdesign一覧
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  designs:
                    $ref: '#/components/schemas/Design'
              examples:
                Example 1:
                  value:
                    designs:
                      id: 1
                      user_id: 1
                      name: design1
                      point: 50
                      contents: '{     \\\"id\\\": 1,     \\\"name\\\": \\\"ABC\\\",     \\\"updated_at\\\": \\\"2010-12-01 12:02:00\\\"   }'
      operationId: get-api-users-design
    parameters: []
  /api/users/projects:
    get:
      summary: Your GET endpoint
      tags: []
      responses: {}
      operationId: get-api-users-projects
  /api/users/password:
    put:
      summary: User　パスワード変更
      operationId: put-users-password
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: boolean
              examples:
                example:
                  value:
                    result: true
      description: '  userのパスワード変更'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  format: int64
                  minimum: 1
                  maximum: 255
                old_password:
                  type: string
                  format: password
                  example: AsoΣ2001195
                  minLength: 8
                  maxLength: 30
                new_password:
                  type: string
                  example: AsoΣ2001195
                  minLength: 8
                  maxLength: 30
                  format: password
              required:
                - id
                - old_password
                - new_password
            examples:
              example:
                value:
                  id: 1
                  old_password: AsoΣ2001195
                  new_password: AsoΣ2001195
      tags:
        - update
        - User
        - Paths
    parameters: []
  /login:
    post:
      summary: Login
      operationId: post-login
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                example:
                  value:
                    id: 1
                    name: 翔
                    email: 2001195@s.asojuku.ac.jp
                    point: 500
          headers: {}
      description: ログイン機能
      tags:
        - Login
        - User
        - Paths
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: 2001195@s.asojuku.ac.jp
                  minLength: 1
                  maxLength: 50
                password:
                  type: string
                  minLength: 8
                  maxLength: 30
                  example: AsoΣ2001195
            examples:
              example:
                value:
                  email: 2001195@s.asojuku.ac.jp
                  password: AsoΣ2001195
      parameters: []
  /api/logout:
    post:
      summary: Logout
      operationId: post-logout
      responses:
        '200':
          description: OK
      description: ''
    parameters: []
  /api/users/search:
    post:
      summary: User　検索
      operationId: post-users-search
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                x-examples:
                  example-1:
                    id: 1
                    name: 翔
                    email: 2001195@s.asojuku.ac.jp
                properties:
                  name:
                    type: string
                    example: 翔
                    minLength: 1
                    maxLength: 50
                  email:
                    type: string
                    example: 2001195@s.asojuku.ac.jp
                    minLength: 1
                    maxLength: 50
              examples:
                example:
                  value:
                    name: 翔
                    email: 2001195@s.asojuku.ac.jp
      description: ユーザー検索
      requestBody:
        content:
          application/json:
            schema:
              type: object
              x-examples:
                example-1:
                  id: 1
                  name: 翔
                  email: 2001195@s.asojuku.ac.jp
              properties:
                id:
                  type:
                    - string
                    - 'null'
                  example: '1'
                name:
                  type:
                    - string
                    - 'null'
                  example: 翔
                  maxLength: 50
                  minLength: 0
                email:
                  type:
                    - string
                    - 'null'
                  example: 2001195@s.asojuku.ac.jp
                  maxLength: 50
                  minLength: 0
            examples:
              example:
                value:
                  id: '1'
                  name: 翔
                  email: 2001195@s.asojuku.ac.jp
              example-1:
                value:
                  id: null
                  name: 翔
                  email: 2001195@s.asojuku.ac.jp
              example-2:
                value:
                  id: '1'
                  name: null
                  email: 2001195@s.asojuku.ac.jp
              example-3:
                value:
                  id: '1'
                  name: 翔
                  email: null
      tags:
        - Search
        - User
        - Paths
    parameters: []
  /api/projects:
    get:
      summary: Project一覧取得
      tags:
        - index
        - Project
        - Paths
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
              examples:
                'Example ':
                  value:
                    - id: 1
                      uuid: 095be615-a8ad-4c33-8e9c-c7612fbf6c9f
                      user_id: 1
                      name: Project1
                      ui: '{     \"id\": 1,     \"name\": \"ABC\",     \"updated_at\": \"2010-12-01 12:02:00\"   }'
      operationId: get-projects
      description: プロジェクト全件表示
    post:
      summary: Project作成
      operationId: post-projects
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
              examples:
                example:
                  value:
                    id: 1
                    user_id: 1
                    name: Project1
      description: プロジェクト作成
      tags:
        - create
        - Projects
        - Paths
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 50
                  example: Project1
                ui:
                  type: string
                  example: '{     \\\"id\\\": 1,     \\\"name\\\": \\\"ABC\\\",     \\\"updated_at\\\": \\\"2010-12-01 12:02:00\\\"   }'
              required:
                - name
            examples:
              Example 1:
                value:
                  name: Project1
                  ui: '{     \\\"id\\\": 1,     \\\"name\\\": \\\"ABC\\\",     \\\"updated_at\\\": \\\"2010-12-01 12:02:00\\\"   }'
    parameters: []
  '/api/projects/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Project情報取得
      tags:
        - Paths
        - show
        - Project
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                x-examples:
                  example-1:
                    project:
                      id: 1
                      user_id: 1
                      name: Project1
                      fike_code: abcdefg
                    project_design:
                      id: 1
                      project_id: 1
                      design_id: 1
                      class: 1
                properties:
                  project:
                    $ref: '#/components/schemas/Project'
                  project_design:
                    $ref: '#/components/schemas/ProjectDesign'
              examples:
                Example:
                  value:
                    project:
                      id: 1
                      uuid: 095be615-a8ad-4c33-8e9c-c7612fbf6c9f
                      user_id: 1
                      name: Project1
                      ui: '{     \"id\": 1,     \"name\": \"ABC\",     \"updated_at\": \"2010-12-01 12:02:00\"   }'
                    project_design:
                      id: 1
                      project_id: 1
                      design_id: 1
                      class: 1
      operationId: get-project-id
      description: 特定idのプロジェクト情報を取得
    put:
      summary: Project情報更新
      operationId: put-project-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
              examples:
                Example:
                  value:
                    id: 1
                    uuid: 095be615-a8ad-4c33-8e9c-c7612fbf6c9f
                    user_id: 1
                    name: Project1
                    ui: '{     \"id\": 1,     \"name\": \"ABC\",     \"updated_at\": \"2010-12-01 12:02:00\"   }'
      description: 特定idのプロジェクト情報を編集
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 50
                  minLength: 1
                  example: design1
            examples:
              example:
                value:
                  name: design1
      tags:
        - Project
        - update
        - Paths
    delete:
      summary: Project情報削除
      operationId: delete-project-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: boolean
              examples:
                example:
                  value:
                    result: true
      description: 特定idのプロジェクト情報を論理削除
      tags:
        - delete
        - Project
        - Paths
  '/api/projects/{id}/copy':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    post:
      summary: Project複製
      operationId: post-projects-id-copy
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
              examples:
                example:
                  value:
                    id: 1
                    user_id: 1
                    name: Project1
      description: 特定idのプロジェクト情報を複製
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: project1-copy
                  minLength: 1
                  maxLength: 50
            examples:
              example:
                value:
                  name: project1-copy
      tags:
        - Paths
        - Project
        - copy
  /api/projects/pages:
    parameters: []
    put:
      summary: Projectのページ保存
      operationId: put-projects-id-save
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: boolean
              examples:
                example:
                  value:
                    result: true
      description: |-
        プロジェクト内の各ページ内容を保存

        おきのどくですが
        ぼうけんのしょ１ばんは
        きえてしまいました.
      tags:
        - Paths
        - Project
        - save
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                uuid:
                  type: string
                  example: '123456'
                number:
                  type: integer
                  format: int32
                  example: 1
                design_id:
                  type: integer
                  format: int64
                  example: 1
                title:
                  type: string
                  maxLength: 50
                  minLength: 1
                contents:
                  type: string
                  format: text
                  maxLength: 1024
            examples:
              Example:
                value:
                  uuid: '123456'
                  number: 1
                  design_id: 1
                  title: 小泉構文
                  contents: 今のままではいけないと思います。だからこそ、日本は今のままではいけないと思っている
  '/api/page/{id}':
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
    delete:
      summary: page削除
      operationId: delete-api-page-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: boolean
              examples:
                example:
                  value:
                    result: true
      description: ''
  /api/designs:
    get:
      summary: Design一覧
      tags:
        - Design
        - Paths
        - index
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Design'
              examples:
                example:
                  value:
                    - id: 1
                      user_id: 1
                      name: design1
      operationId: get-designs
      description: デザイン全件表示
    post:
      summary: Design作成
      operationId: post-designs
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Design'
              examples:
                example:
                  value:
                    id: 1
                    user_id: 1
                    name: design1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 50
                  example: design1
                point:
                  type: integer
                  minimum: 0
                  maximum: 500
                  example: 5
                contents:
                  type: string
                  example: '{ "name": "Tanaka", "age": 26 }'
            examples:
              Example 1:
                value:
                  name: design1
                  point: 5
                  contents: '{ "name": "Tanaka", "age": 26 }'
      description: デザイン作成
      tags:
        - Design
        - Paths
        - create
    parameters: []
  '/api/designs/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Design情報取得
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Design'
              examples:
                example:
                  value:
                    id: 1
                    user_id: 1
                    name: design1
      operationId: get-designs-id
      description: 特定idのデザイン情報を取得
    put:
      summary: Design情報更新
      operationId: put-designs-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Design'
              examples:
                example:
                  value:
                    id: 1
                    user_id: 1
                    name: design1
      description: 特定idのデザイン情報を編集
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: design1
                point:
                  type: integer
                  minimum: 0
                  maximum: 500
                  example: 5
                contents:
                  type: string
                  example: '{ "name": "Tanaka", "age": 26 }'
            examples:
              Example 1:
                value:
                  name: design1
                  point: 5
                  contents: '{ "name": "Tanaka", "age": 26 }'
          application/xml:
            schema:
              type: object
              properties:
                name:
                  type: string
                point:
                  type: integer
                contents:
                  type: string
    delete:
      summary: Design情報削除
      operationId: delete-designs-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: boolean
              examples:
                example-1:
                  value:
                    result: true
      description: 特定idのデザイン情報を論理削除
  '/api/designs/{id}/buy':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Design購入
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Design'
              examples:
                example:
                  value:
                    id: 1
                    user_id: 1
                    name: design1
      operationId: get-designs-buy-id
      description: デザインを購入
  /api/designs/gacha:
    get:
      summary: Designガチャ
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Design'
              examples:
                example:
                  value:
                    id: 1
                    user_id: 1
                    name: design1
      operationId: get-designs-gacha
      description: ガチャァァァ!!　10連ガチャァ!!　いっぱいいっぱい回すのぉぉ!!　溶けるぅ!!　溶けちゃうう!!
    parameters: []
  /api/verifications:
    post:
      summary: 認証コードで確認
      operationId: post-api-verifications
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: 2001195@s.asojuku.ac.jp
                code:
                  type: string
                  minLength: 6
                  maxLength: 6
                  format: number
                  example: '123456'
            examples:
              example:
                value:
                  email: 2001195@s.asojuku.ac.jp
                  code: '123456'
  '/api/verifications/{email}':
    parameters:
      - schema:
          type: string
        name: email
        in: path
        required: true
    get:
      summary: 認証コード再送信
      tags: []
      responses: {}
      operationId: get-api-verifications-email
  /api/verifications/test:
    post:
      summary: テスト送信
      tags: []
      responses: {}
      operationId: get-api-verifications
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: 2001154@s.asojuku.ac.jp
                name:
                  type: string
                  example: 木山
                text:
                  type: string
                  example: あいいあいあいあいあいああい
            examples:
              example:
                value:
                  email: 2001154@s.asojuku.ac.jp
                  name: 木山
                  text: あいいあいあいあいあいああい
    parameters: []
components:
  schemas:
    User:
      title: User
      x-stoplight:
        id: dyla04j3g950s
      type: object
      examples:
        - id: 1
          name: 翔
          email: 2001195@s.asojuku.ac.jp
          point: 500
      description: ユーザーモデル
      x-tags:
        - Model
        - User
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          maximum: 255
        name:
          type: string
          maxLength: 50
          minLength: 1
          example: 翔
        email:
          type: string
          format: email
          example: 2001195@s.asojuku.ac.jp
          maxLength: 50
          minLength: 1
        point:
          type: integer
          format: int32
          example: 500
          minimum: 1
          maximum: 50000
          default: 500
      required:
        - id
        - name
        - email
        - point
    UserVerifications:
      title: UserVerifications
      x-stoplight:
        id: 6ac2kjrn2nqn4
      type: object
      examples:
        - id: 1
          name: 翔
          code: '123456'
      description: ''
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: 翔
        code:
          type: string
          minLength: 6
          maxLength: 6
          example: '123456'
    Project:
      title: Project
      x-stoplight:
        id: op4kaidt3w1ms
      type: object
      x-tags:
        - Model
        - Project
      examples:
        - id: 1
          uuid: 095be615-a8ad-4c33-8e9c-c7612fbf6c9f
          user_id: 1
          name: Project1
          ui: '{ "name": "Tanaka", "age": 26 }'
      description: プロジェクトモデル
      properties:
        id:
          type: integer
          format: int64
          example: 1
          minimum: 1
          maximum: 255
        uuid:
          type: string
          format: uuid
        user_id:
          type: integer
          format: int64
          example: 1
          minimum: 1
          maximum: 255
        name:
          type: string
          example: Project1
          minLength: 1
          maxLength: 50
        ui:
          type: string
          example: '{ "name": "Tanaka", "age": 26 }'
      required:
        - id
        - user_id
        - name
    Pages:
      title: Pages
      x-stoplight:
        id: tp78ipwn62m0r
      type: object
      properties:
        project_id:
          type: integer
          format: int64
          example: 1
        number:
          type: integer
          example: 1
          format: int32
        user_id:
          type: integer
          format: int64
          example: 1
        design_id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: 小泉構文
          maxLength: 50
        contents:
          type: string
          format: text
          example: 今のままではいけないと思います。だからこそ、日本は今のままではいけないと思っている
          maxLength: 1024
      examples:
        - project_id: 1
          number: 1
          user_id: 1
          design_id: 1
          title: 小泉構文
          contents: 今のままではいけないと思います。だからこそ、日本は今のままではいけないと思っている
    Design:
      title: Design
      x-stoplight:
        id: turqptaevpqtg
      type: object
      examples:
        - id: 1
          user_id: 1
          name: design1
          point: 50
          contents: '{ "name": "Tanaka", "age": 26 }'
      x-tags:
        - Model
        - Design
      description: デザインモデル
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          maximum: 255
        user_id:
          type: integer
          format: int64
          example: 1
          minimum: 1
          maximum: 255
        name:
          type: string
          maxLength: 50
          minLength: 1
          example: design1
        point:
          type: integer
          format: int32
          default: 0
          example: 50
        contents:
          type: string
          example: '{ "name": "Tanaka", "age": 26 }'
    ProjectDesign:
      title: ProjectDesign
      x-stoplight:
        id: 5qalg09797izs
      type: object
      x-tags:
        - Model
        - Project
        - ProjectDesign
        - Design
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          maximum: 255
          example: 1
        project_id:
          type: integer
          format: int64
          example: 1
          minimum: 1
          maximum: 255
        design_id:
          type: integer
          format: int64
          example: 1
          minimum: 1
          maximum: 255
        class:
          type: integer
          format: int32
          example: 1
          default: 1
          minimum: 1
          maximum: 9
      examples:
        - id: 1
          project_id: 1
          design_id: 1
          class: 1
      description: プロジェットデザインモデル
    UserDesign:
      title: UserDesign
      x-stoplight:
        id: 6xayu7fjadqvj
      type: object
      x-tags:
        - Model
        - User
        - UserDesign
        - Design
      properties:
        id:
          type: integer
          example: 1
          format: int64
          minimum: 1
          maximum: 255
        user_id:
          type: integer
          format: int64
          example: 1
          minimum: 1
          maximum: 255
        design_id:
          type: integer
          format: int64
          example: 1
          minimum: 1
          maximum: 255
      examples:
        - id: 1
          user_id: 1
          design_id: 1
      description: ユーザーデザインモデル
    ProjectUser:
      title: ProjectUser
      x-stoplight:
        id: vqb2e2cbzk5ud
      type: object
      x-tags:
        - Model
        - Project
        - ProjectUser
        - User
      properties:
        id:
          type: integer
          format: int64
          example: 1
          minimum: 1
          maximum: 255
        project_id:
          type: integer
          example: 1
          minimum: 1
          maximum: 255
          format: int64
        user_id:
          type: integer
          format: int64
          example: 1
          minimum: 1
          maximum: 255
      examples:
        - id: 1
          project_id: 1
          user_id: 1
      description: プロジェクトユーザーモデル
    GachaSetting:
      title: GachaSetting
      x-stoplight:
        id: g86g88d2euepy
      type: object
      description: ガチャセッティングテーブル
      x-tags:
        - GachaSetting
        - Model
      examples:
        - id: 1
          user_id: 1
          setting: {}
      properties:
        id:
          type: integer
          format: int64
          example: 1
          minimum: 1
          maximum: 255
        user_id:
          type: integer
          format: int64
          example: 1
          minimum: 1
          maximum: 255
        setting:
          type: string
          example: '{ "name": "Tanaka", "age": 26 }'
tags:
  - name: Model
  - name: Paths
